[{"D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\index.js":"1","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\App.js":"2","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\serviceWorker.js":"3","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Components\\Toasts.js":"4","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Components\\LauncherModal.js":"5","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Components\\Tooltip.js":"6","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Classes\\Constants.js":"7","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Classes\\TimerClass.js":"8"},{"size":269,"mtime":1628434065926,"results":"9","hashOfConfig":"10"},{"size":1043,"mtime":1628886233626,"results":"11","hashOfConfig":"10"},{"size":5086,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":3330,"mtime":1625593011652,"results":"13","hashOfConfig":"10"},{"size":7657,"mtime":1628958371648,"results":"14","hashOfConfig":"10"},{"size":3974,"mtime":1628376705230,"results":"15","hashOfConfig":"10"},{"size":706,"mtime":1625592917970,"results":"16","hashOfConfig":"10"},{"size":746,"mtime":1623778063347,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fcw821",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38"},"D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\index.js",[],"D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\App.js",[],"D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\serviceWorker.js",[],"D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Components\\Toasts.js",["39"],"import React from \"react\";\r\nimport \"./Toasts.scss\";\r\nimport { getRandomKey, joinClassNames } from \"../Classes/Constants\";\r\nimport Timer from \"../Classes/TimerClass\";\r\n\r\nexport function Toast({ children, type, life, remove, callback, color, fixedTime = false }) {\r\n\tconst handleRemove = () => {\r\n\t\tsetClosing(true);\r\n\r\n\t\tsetTimeout(remove, 500);\r\n\t};\r\n\t\r\n\tconst [closing, setClosing] = React.useState(false);\r\n\tconst timer = React.useMemo(() => new Timer(handleRemove, life * 1000, false), []);\r\n\tconst progressBar = React.useRef();\r\n\t\r\n\tconst handleMouseEnter = () => {\r\n\t\ttimer.pause();\r\n\t\tprogressBar.current.style.animationPlayState = \"paused\";\r\n\t};\r\n\t\r\n\tconst handleMouseLeave = () => {\r\n\t\ttimer.resume();\r\n\t\tprogressBar.current.style.animationPlayState = \"running\";\r\n\t};\r\n\t\r\n\tReact.useEffect(() => {\r\n\t\tconst handleFocus = () => !fixedTime && handleMouseLeave();\r\n\t\tconst handleBlur = () => !fixedTime && handleMouseEnter();\r\n\t\t\r\n\t\twindow.addEventListener(\"focus\", handleFocus);\r\n\t\twindow.addEventListener(\"blur\", handleBlur);\r\n\t\t\r\n\t\t(fixedTime || document.hasFocus()) && handleMouseLeave();\r\n\t\t\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"focus\", handleFocus);\r\n\t\t\twindow.removeEventListener(\"blur\", handleBlur);\r\n\t\t};\r\n\t});\r\n\t\r\n\treturn (\r\n\t\t<div className={joinClassNames(\"Toast\", [closing, \"Closing\"], type)}\r\n\t\t\t onMouseEnter={fixedTime ? null : handleMouseEnter}\r\n\t\t\t onMouseLeave={fixedTime ? null : handleMouseLeave}\r\n\t\t\t onClick={callback ? e => { callback(e); timer.end(); } : () => { timer.end(); }}\r\n\t\t\t style={{ cursor: callback ? \"pointer\" : null, backgroundColor: color }}>\r\n\t\t\t{ children }\r\n\r\n\t\t\t<div className=\"ProgressBarContainer\">\r\n\t\t\t\t<div ref={progressBar} className=\"ProgressBar\" style={{ animationDuration: life + \"s\" }}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default class Toasts extends React.Component {\r\n\tstatic instance;\r\n\tstatic ref = React.createRef();\r\n\t\r\n\tstate = { toasts: [] };\r\n\r\n\tcomponentDidMount() {\r\n\t\tToasts.instance = this;\r\n\t}\r\n\t\r\n\tstatic showToast(children, type = \"\", life = 5, additionalOptions = {}) {\r\n\t\tconst { callback = null, color = null, fixedTime = false } = additionalOptions;\r\n\t\t\r\n\t\tconst toast = React.createElement(Toast, {\r\n\t\t\tkey: getRandomKey(),\r\n\t\t\tchildren, type, life, color, fixedTime,\r\n\t\t\tremove: () => {\r\n\t\t\t\tthis.instance.setState({ toasts: this.instance.state.toasts.filter(t => t !== toast) });\r\n\t\t\t},\r\n\t\t\tcallback\r\n\t\t});\r\n\r\n\t\tthis.instance.setState({ toasts: [ ...this.instance.state.toasts, toast ] });\r\n\t\treturn toast;\r\n\t}\r\n\t\r\n\tget horizontalStyle() {\r\n\t\treturn \"Center\";\r\n\t\t\r\n\t\t// switch (Settings.props.notifications.toasts.positionX) {\r\n\t\t// \tcase 0:\r\n\t\t// \t\treturn \"Left\";\r\n\t\t// \tcase 1:\r\n\t\t// \t\treturn \"Center\";\r\n\t\t// \tcase 2:\r\n\t\t// \t\treturn \"Right\";\r\n\t\t// }\r\n\t}\r\n\t\r\n\tget verticalStyle() {\r\n\t\treturn \"Bottom\";\r\n\t\t\r\n\t\t// switch (Settings.props.notifications.toasts.positionY) {\r\n\t\t// \tcase 0:\r\n\t\t// \t\treturn \"Top\";\r\n\t\t// \tcase 1:\r\n\t\t// \t\treturn \"Bottom\";\r\n\t\t// }\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div ref={Toasts.ref} className={joinClassNames(\"ToastsContainer\", this.horizontalStyle, this.verticalStyle)}>\r\n\t\t\t\t<div className={joinClassNames(\"ClearButton\", [!!this.state.toasts?.length, \"Visible\"])} onClick={() => this.setState({ toasts: [] })}>\r\n\t\t\t\t\t<u>Close all</u>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t{ this.state.toasts }\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Components\\LauncherModal.js",["40","41"],"ï»¿import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFile, faFire, faFolder, faTerminal } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Tooltip from \"./Tooltip\";\r\nimport Toasts from \"./Toasts\";\r\nimport IconFlat from \"../Icons/LogoFlat.png\";\r\n\r\nconst commands = {\r\n    help: {\r\n        description: \"Lists all of the available commands.\"\r\n    },\r\n    js: {\r\n        description: \"Executes the specified arguments as JavaScript.\",\r\n        arguments: \"<code>\",\r\n        handle: (...args) => eval(args.join(\" \"))\r\n    }\r\n};\r\n\r\n// Import the file system module\r\nconst fs = window.require(\"fs\");\r\n// Import the path module\r\nconst path = window.require(\"path\");\r\n// Get the child process module\r\nconst childProcess = window.require(\"child_process\");\r\n\r\n// This is responsible for formatting paths to variable paths\r\nfunction getPathFromString(value) {\r\n    // Grab the electron process, not the renderer process\r\n    const process = window.require(\"process\");\r\n    // Split the path into directory sections\r\n    const pathSplit = value.split(\"/\");\r\n\r\n    // Get the root of the path based on some variables\r\n    // This might be the most incomprehensible line I've written in a while\r\n    const root = {\r\n        appdata: process.env.APPDATA,\r\n        local: process.env.LOCALAPPDATA,\r\n        localappdata: process.env.LOCALAPPDATA,\r\n        home: process.env.HOMEPATH,\r\n        public: process.env.PUBLIC,\r\n        user: process.env.USERPROFILE,\r\n        programfiles86: process.env.ProgramFiles,\r\n        programfiles: process.env.ProgramW6432\r\n    }[pathSplit[0].toLowerCase().replaceAll(\"%\", \"\")] ?? pathSplit[0];\r\n\r\n    // Return the path based on the root directory and the rest of the split path\r\n    return path.join(root, pathSplit.slice(1).join(\"/\")).replaceAll(\"\\\\\", \"/\");\r\n}\r\n\r\nexport default function LauncherModal() {\r\n    // Create the field ref\r\n    const fieldRef = React.useRef();\r\n    // Create our auto complete state\r\n    const [autoCompleteEntries, setAutoCompleteEntries] = React.useState([]);\r\n    \r\n    // Handle the send event\r\n    function handleSend(args) {\r\n        const _arguments = args.match(/[^\\s\"']+|\"([^\"]*)\"|'([^']*)'/gm);\r\n        \r\n        // Sent arguments was of type command, execute command if valid\r\n        if (args.startsWith(\"!\")) {\r\n            // Get the command object based on the first argument, lowercase, without the !\r\n            const command = commands[args.split(\" \")[0].slice(1).toLowerCase()];\r\n            \r\n            // Command exists, execute it\r\n            if (command) {\r\n                // Call the command and get its return value\r\n                const response = command.handle(..._arguments.slice(1));\r\n                \r\n                // Display our data to the user\r\n                response && Toasts.showToast(response.toString());\r\n                console.log(response);\r\n            }\r\n            // Command does not exist, throw an error\r\n            else {\r\n                Toasts.showToast(<span>{arguments[0].slice(1)} is not a valid command</span>, \"Failure\");\r\n            }\r\n        }\r\n        // TODO check for indexed files\r\n        // If no commands or indexed files were found, try to launch manually\r\n        else {\r\n            // Try catch, in case of errors\r\n            try {\r\n                // Open the file, directory, or URL\r\n                childProcess.exec(`start \"\" \"${getPathFromString(args)}\"`);\r\n\r\n                // Close the modal\r\n                window.close();\r\n            }\r\n            // An error was caught, throw it to the console and warn the user\r\n            catch (e) {\r\n                console.error(e);\r\n                Toasts.showToast(\"Error opening file, check console for details\", \"Failure\");\r\n            }\r\n        }\r\n        \r\n        // Clear the field\r\n        fieldRef.current.value = \"\";\r\n    }\r\n    \r\n    // Handle rendering of auto-complete\r\n    function handleAutoComplete({ currentTarget: { value } }) {\r\n        // If we're typing a command, handle that and return\r\n        if (value.startsWith(\"!\")) {\r\n            // Get the value after the !, in lowercase\r\n            const search = value.slice(1).toLowerCase();\r\n            // Filter all of our commands by search\r\n            const results = Object.keys(commands).filter(cmd => ~cmd.indexOf(search));\r\n            // Create an empty components array\r\n            const components = [];\r\n            \r\n            // Iterate our results and push them to the components array\r\n            for (const result of results) {\r\n                const command = commands[result];\r\n                \r\n                components.push(\r\n                    <div className=\"Item\" key={result} onClick={() => fieldRef.current.value = \"!\" + result}>\r\n                        <FontAwesomeIcon icon={faTerminal}/>\r\n                        \r\n                        <span><b>!{result}</b><span style={{ opacity: 0.5 }}> - {command.description}</span></span>\r\n                    </div>\r\n                );\r\n                \r\n                setAutoCompleteEntries(components);\r\n            }\r\n            \r\n            return;\r\n        }\r\n        \r\n        // Put our raw path through the variable checks\r\n        const fpRaw = getPathFromString(value);\r\n        // Get the second to last path entry, to exclude what we're searching\r\n        const fpDir = fpRaw.split(\"/\").slice(0, -1).join(\"/\");\r\n        // If the fp doesn't exist, but the dir does, set fp to dir\r\n        const fp = !fs.existsSync(fpRaw) && fs.existsSync(fpDir) ? fpDir : fpRaw;\r\n        \r\n        // dir exists, get its files\r\n        if (value && fs.existsSync(fp)) {\r\n            // Read all files in the directory, filtered by searching the final path entry\r\n            const files = fs.readdirSync(fp).filter(p =>\r\n                ~path.join(fp, p).toLowerCase().indexOf(fpRaw.split(\"/\").slice(-1)[0].toLowerCase()));\r\n            // Map the first 10 files into auto complete entry components\r\n            const components = files.slice(0, 10).map(fn => (\r\n                <div className=\"Item\" key={fn} onClick={() => fieldRef.current.value = path.join(fp, fn)}>\r\n                    <FontAwesomeIcon icon={fs.lstatSync(path.join(fp, fn)).isDirectory()\r\n                        ? faFolder : faFile}/>\r\n                    \r\n                    <span>{fn}</span>\r\n                </div>\r\n            ));\r\n            \r\n            // Set our entries to the components list\r\n            setAutoCompleteEntries(components);\r\n        }\r\n        // If the directory doesn't exist, clear our entries\r\n        else setAutoCompleteEntries([]);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"LauncherModal\">\r\n            <div className=\"Title\">\r\n                <img alt=\"Icon\" src={IconFlat} height={20}/>\r\n                \r\n                Ignis Launcher\r\n            </div>\r\n\r\n            <div className=\"Flex\">\r\n                <input className=\"LauncherModalField\" ref={fieldRef}\r\n                       onKeyDown={e => e.key === \"Enter\" && handleSend(e.currentTarget.value)}\r\n                       onChange={handleAutoComplete}\r\n                       placeholder=\"Example - !help\"/>\r\n\r\n                <div className=\"Button\" onClick={() => handleSend(fieldRef.current.value)}>\r\n                    <FontAwesomeIcon icon={faFire}/>\r\n                    \r\n                    <Tooltip>\r\n                        Run Command\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"AutoComplete\">\r\n                {autoCompleteEntries}\r\n            </div>\r\n        </div>\r\n    );\r\n}","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Components\\Tooltip.js",["42","43","44","45","46"],"ï»¿import React from \"react\";\r\nimport \"./Tooltip.scss\";\r\nimport { joinClassNames } from \"../Classes/Constants\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nexport default function Tooltip({ children, direction = \"up\", className = \"\", color, style, onClick }) {\r\n    const [visible, setVisible] = React.useState(false);\r\n    const ref = React.useRef();\r\n    \r\n    React.useEffect(() => {\r\n        ref.current.parentElement.classList.add(\"HasTooltip\");\r\n        \r\n        return () => {\r\n            ref.current && ref.current.parentElement.classList.remove(\"HasTooltip\");\r\n        };\r\n    }, [ children, direction ]);\r\n    \r\n    return (\r\n        <div ref={ref} className={joinClassNames(\"TooltipContainer\", direction.toLowerCase(), [visible, \"Visible\"], className)} style={style} onClick={onClick}>\r\n            <div className=\"Tooltip\" style={{ backgroundColor: color }}>{ children }</div>\r\n            <div className=\"TooltipArrow\" style={{ backgroundColor: color }}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function DetachedTooltip({ children, direction = \"up\", className = \"\", color, style, onClick, parentRef }) {\r\n    const container = React.useMemo(() => document.getElementsByClassName(\"AppMain\")[0], []);\r\n    const [visible, setVisible] = React.useState(false);\r\n    const [styles, setStyles] = React.useState(null);\r\n    const ref = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n        const parent = parentRef.current;\r\n        \r\n        const events = {\r\n            onMouseEnter: () => {\r\n                if (visible) return;\r\n                \r\n                const rect = parent.getBoundingClientRect();\r\n                const tooltipRect = ref.current.getBoundingClientRect();\r\n                \r\n                switch (direction) {\r\n                    case \"up\":\r\n                        setStyles({\r\n                            top: rect.y - rect.height - tooltipRect.height,\r\n                            left: rect.x + (rect.width / 2)\r\n                        });\r\n                        break;\r\n\r\n                    case \"left\":\r\n                        setStyles({\r\n                            top: rect.y - (rect.height / 2) + ((tooltipRect.height * 1.25) / 3),\r\n                            left: rect.x - (tooltipRect.width * 1.25)\r\n                        });\r\n                        break;\r\n                        \r\n                    case \"down\":\r\n                        setStyles({\r\n                            bottom: rect.y - (tooltipRect.height * 1.25),\r\n                            left: rect.x - ((tooltipRect.width * 1.25) / 2) + (rect.width / 2)\r\n                        });\r\n                        break;\r\n                        \r\n                    case \"right\":\r\n                        setStyles({\r\n                            top: rect.y - ((tooltipRect.height * 1.25) / 2) + (rect.height / 2),\r\n                            right: rect.x - tooltipRect.width - 5\r\n                        });\r\n                        break;\r\n                }\r\n                \r\n                setVisible(true);\r\n            },\r\n            onMouseLeave: () => setVisible(false)\r\n        };\r\n        \r\n        parent.addEventListener(\"mouseenter\", events.onMouseEnter);\r\n        parent.addEventListener(\"mouseleave\", events.onMouseLeave);\r\n        \r\n        return () => {\r\n            parent.removeEventListener(\"mouseenter\", events.onMouseEnter);\r\n            parent.removeEventListener(\"mouseleave\", events.onMouseLeave);\r\n        };\r\n    }, [ children, direction ]);\r\n\r\n    return ReactDOM.createPortal(\r\n        <div ref={ref} className={joinClassNames(\"TooltipContainer Detached\", direction.toLowerCase(), [visible, \"Visible\"], className)}\r\n             style={{ ...(styles ?? {}), ...(style ?? {}) }} onClick={onClick}>\r\n            <div className=\"Tooltip\" style={{ backgroundColor: color }}>{ children }</div>\r\n            <div className=\"TooltipArrow\" style={{ backgroundColor: color }}/>\r\n        </div>,\r\n        container\r\n    );\r\n}","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Classes\\Constants.js",["47"],"ï»¿export function joinClassNames() {\r\n    let final = \"\";\r\n\r\n    for (let i = 0; i < arguments.length; i++) {\r\n        switch (typeof(arguments[i])) {\r\n            case (Array.isArray(arguments[i]) && typeof(arguments[i][0]) === \"boolean\" && \"object\"):\r\n                if (arguments[i][0] === true)\r\n                    final += arguments[i][1];\r\n                else if (arguments[i][2])\r\n                    final += arguments[i][2];\r\n                break;\r\n\r\n            default:\r\n                final += arguments[i];\r\n                break;\r\n        }\r\n\r\n        final += \" \";\r\n    }\r\n\r\n    return final.trim();\r\n}\r\n\r\nexport function getRandomKey() { return Math.random().toString(36).substr(7); }","D:\\Drive\\Shared\\JavaScript\\Electron\\ignis\\frontend\\src\\Classes\\TimerClass.js",["48"],"ï»¿export default class Timer {\r\n    id;\r\n    startTime;\r\n    remainingTime;\r\n    callback;\r\n    duration;\r\n    \r\n    constructor(callback, duration, playAutomatically = true) {\r\n        this.callback = callback;\r\n        this.duration = duration;\r\n        this.remainingTime = duration;\r\n        \r\n        if (playAutomatically)\r\n            this.resume();\r\n    }\r\n    \r\n    resume() {\r\n        this.startTime = Date.now();\r\n        \r\n        clearTimeout(this.id);\r\n        this.id = setTimeout(this.callback, this.remainingTime);\r\n    }\r\n    \r\n    pause() {\r\n        clearTimeout(this.id);\r\n        this.remainingTime -= Date.now() - this.startTime;\r\n    }\r\n    \r\n    end() {\r\n        clearTimeout(this.id);\r\n        this.callback();\r\n    }\r\n}",{"ruleId":"49","severity":1,"message":"50","line":14,"column":81,"nodeType":"51","endLine":14,"endColumn":83,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"57"},{"ruleId":"58","severity":1,"message":"59","line":15,"column":30,"nodeType":"60","messageId":"56","endLine":15,"endColumn":34},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"61"},{"ruleId":"62","severity":1,"message":"63","line":7,"column":21,"nodeType":"64","messageId":"65","endLine":7,"endColumn":31},{"ruleId":"49","severity":1,"message":"66","line":14,"column":32,"nodeType":"64","endLine":14,"endColumn":39},{"ruleId":"67","severity":1,"message":"68","line":42,"column":17,"nodeType":"69","messageId":"70","endLine":70,"endColumn":18},{"ruleId":"49","severity":1,"message":"71","line":84,"column":8,"nodeType":"51","endLine":84,"endColumn":31,"suggestions":"72"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"73"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":1,"nodeType":"55","messageId":"56","fix":"74"},"react-hooks/exhaustive-deps","React Hook React.useMemo has missing dependencies: 'handleRemove' and 'life'. Either include them or remove the dependency array.","ArrayExpression",["75"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"76","text":"77"},"no-eval","eval can be harmful.","CallExpression",{"range":"78","text":"77"},"no-unused-vars","'setVisible' is assigned a value but never used.","Identifier","unusedVar","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook React.useEffect has missing dependencies: 'parentRef' and 'visible'. Either include them or remove the dependency array.",["79"],{"range":"80","text":"77"},{"range":"81","text":"77"},{"desc":"82","fix":"83"},[-1,0],"",[-1,0],{"desc":"84","fix":"85"},[-1,0],[-1,0],"Update the dependencies array to be: [handleRemove, life]",{"range":"86","text":"87"},"Update the dependencies array to be: [children, direction, parentRef, visible]",{"range":"88","text":"89"},[489,491],"[handleRemove, life]",[3471,3494],"[children, direction, parentRef, visible]"]