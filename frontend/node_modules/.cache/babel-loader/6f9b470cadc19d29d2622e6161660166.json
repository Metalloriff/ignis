{"ast":null,"code":"import _createForOfIteratorHelper from\"D:/Drive/Shared/JavaScript/Electron/ignis/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"D:/Drive/Shared/JavaScript/Electron/ignis/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"D:/Drive/Shared/JavaScript/Electron/ignis/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faFile,faFire,faFolder,faTerminal}from\"@fortawesome/free-solid-svg-icons\";import Tooltip from\"./Tooltip\";import Toasts from\"./Toasts\";import IconFlat from\"../Icons/LogoFlat.png\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var commands={help:{description:\"Lists all of the available commands.\"},js:{description:\"Executes the specified arguments as JavaScript.\",arguments:\"<code>\",handle:function handle(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return eval(args.join(\" \"));}}};// Import the file system module\nvar fs=window.require(\"fs\");// Import the path module\nvar path=window.require(\"path\");// Get the child process module\nvar childProcess=window.require(\"child_process\");// This is responsible for formatting paths to variable paths\nfunction getPathFromString(value){var _appdata$local$locala;// Grab the electron process, not the renderer process\nvar process=window.require(\"process\");// Split the path into directory sections\nvar pathSplit=value.split(\"/\");// Get the root of the path based on some variables\n// This might be the most incomprehensible line I've written in a while\nvar root=(_appdata$local$locala={appdata:process.env.APPDATA,local:process.env.LOCALAPPDATA,localappdata:process.env.LOCALAPPDATA,home:process.env.HOMEPATH,public:process.env.PUBLIC,user:process.env.USERPROFILE,programfiles86:process.env.ProgramFiles,programfiles:process.env.ProgramW6432}[pathSplit[0].toLowerCase().replaceAll(\"%\",\"\")])!==null&&_appdata$local$locala!==void 0?_appdata$local$locala:pathSplit[0];// Return the path based on the root directory and the rest of the split path\nreturn path.join(root,pathSplit.slice(1).join(\"/\")).replaceAll(\"\\\\\",\"/\");}export default function LauncherModal(){// Create the field ref\nvar fieldRef=React.useRef();// Create our auto complete state\nvar _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),autoCompleteEntries=_React$useState2[0],setAutoCompleteEntries=_React$useState2[1];// Handle the send event\nfunction handleSend(args){var _arguments=args.match(/[^\\s\"']+|\"([^\"]*)\"|'([^']*)'/gm);// Sent arguments was of type command, execute command if valid\nif(args.startsWith(\"!\")){// Get the command object based on the first argument, lowercase, without the !\nvar command=commands[args.split(\" \")[0].slice(1).toLowerCase()];// Command exists, execute it\nif(command){// Call the command and get its return value\nvar response=command.handle.apply(command,_toConsumableArray(_arguments.slice(1)));// Display our data to the user\nresponse&&Toasts.showToast(response.toString());console.log(response);}// Command does not exist, throw an error\nelse{Toasts.showToast(/*#__PURE__*/_jsxs(\"span\",{children:[arguments[0].slice(1),\" is not a valid command\"]}),\"Failure\");}}// TODO check for indexed files\n// If no commands or indexed files were found, try to launch manually\nelse{// Try catch, in case of errors\ntry{// Open the file, directory, or URL\nchildProcess.exec(\"start \\\"\\\" \\\"\".concat(getPathFromString(args),\"\\\"\"));// Close the modal\nwindow.close();}// An error was caught, throw it to the console and warn the user\ncatch(e){console.error(e);Toasts.showToast(\"Error opening file, check console for details\",\"Failure\");}}// Clear the field\nfieldRef.current.value=\"\";}// Handle rendering of auto-complete\nfunction handleAutoComplete(_ref){var value=_ref.currentTarget.value;// If we're typing a command, handle that and return\nif(value.startsWith(\"!\")){// Get the value after the !, in lowercase\nvar search=value.slice(1).toLowerCase();// Filter all of our commands by search\nvar results=Object.keys(commands).filter(function(cmd){return~cmd.indexOf(search);});// Create an empty components array\nvar components=[];// Iterate our results and push them to the components array\nvar _iterator=_createForOfIteratorHelper(results),_step;try{var _loop=function _loop(){var result=_step.value;var command=commands[result];components.push(/*#__PURE__*/_jsxs(\"div\",{className:\"Item\",onClick:function onClick(){return fieldRef.current.value=\"!\"+result;},children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faTerminal}),/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsxs(\"b\",{children:[\"!\",result]}),/*#__PURE__*/_jsxs(\"span\",{style:{opacity:0.5},children:[\" - \",command.description]})]})]},result));setAutoCompleteEntries(components);};for(_iterator.s();!(_step=_iterator.n()).done;){_loop();}}catch(err){_iterator.e(err);}finally{_iterator.f();}return;}// Put our raw path through the variable checks\nvar fpRaw=getPathFromString(value);// Get the second to last path entry, to exclude what we're searching\nvar fpDir=fpRaw.split(\"/\").slice(0,-1).join(\"/\");// If the fp doesn't exist, but the dir does, set fp to dir\nvar fp=!fs.existsSync(fpRaw)&&fs.existsSync(fpDir)?fpDir:fpRaw;// dir exists, get its files\nif(value&&fs.existsSync(fp)){// Read all files in the directory, filtered by searching the final path entry\nvar files=fs.readdirSync(fp).filter(function(p){return~path.join(fp,p).toLowerCase().indexOf(fpRaw.split(\"/\").slice(-1)[0].toLowerCase());});// Map the first 10 files into auto complete entry components\nvar _components=files.slice(0,10).map(function(fn){return/*#__PURE__*/_jsxs(\"div\",{className:\"Item\",onClick:function onClick(){return fieldRef.current.value=path.join(fp,fn);},children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:fs.lstatSync(path.join(fp,fn)).isDirectory()?faFolder:faFile}),/*#__PURE__*/_jsx(\"span\",{children:fn})]},fn);});// Set our entries to the components list\nsetAutoCompleteEntries(_components);}// If the directory doesn't exist, clear our entries\nelse setAutoCompleteEntries([]);}return/*#__PURE__*/_jsxs(\"div\",{className:\"LauncherModal\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"Title\",children:[/*#__PURE__*/_jsx(\"img\",{alt:\"Icon\",src:IconFlat,height:20}),\"Ignis Launcher\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"Flex\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"LauncherModalField\",ref:fieldRef,onKeyDown:function onKeyDown(e){return e.key===\"Enter\"&&handleSend(e.currentTarget.value);},onChange:handleAutoComplete,placeholder:\"Example - !help\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"Button\",onClick:function onClick(){return handleSend(fieldRef.current.value);},children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faFire}),/*#__PURE__*/_jsx(Tooltip,{children:\"Run Command\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"AutoComplete\",children:autoCompleteEntries})]});}","map":{"version":3,"sources":["D:/Drive/Shared/JavaScript/Electron/ignis/frontend/src/Components/LauncherModal.js"],"names":["React","FontAwesomeIcon","faFile","faFire","faFolder","faTerminal","Tooltip","Toasts","IconFlat","commands","help","description","js","arguments","handle","args","eval","join","fs","window","require","path","childProcess","getPathFromString","value","process","pathSplit","split","root","appdata","env","APPDATA","local","LOCALAPPDATA","localappdata","home","HOMEPATH","public","PUBLIC","user","USERPROFILE","programfiles86","ProgramFiles","programfiles","ProgramW6432","toLowerCase","replaceAll","slice","LauncherModal","fieldRef","useRef","useState","autoCompleteEntries","setAutoCompleteEntries","handleSend","_arguments","match","startsWith","command","response","showToast","toString","console","log","exec","close","e","error","current","handleAutoComplete","currentTarget","search","results","Object","keys","filter","cmd","indexOf","components","result","push","opacity","fpRaw","fpDir","fp","existsSync","files","readdirSync","p","map","fn","lstatSync","isDirectory","key"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFile, faFire, faFolder, faTerminal } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Tooltip from \"./Tooltip\";\r\nimport Toasts from \"./Toasts\";\r\nimport IconFlat from \"../Icons/LogoFlat.png\";\r\n\r\nconst commands = {\r\n    help: {\r\n        description: \"Lists all of the available commands.\"\r\n    },\r\n    js: {\r\n        description: \"Executes the specified arguments as JavaScript.\",\r\n        arguments: \"<code>\",\r\n        handle: (...args) => eval(args.join(\" \"))\r\n    }\r\n};\r\n\r\n// Import the file system module\r\nconst fs = window.require(\"fs\");\r\n// Import the path module\r\nconst path = window.require(\"path\");\r\n// Get the child process module\r\nconst childProcess = window.require(\"child_process\");\r\n\r\n// This is responsible for formatting paths to variable paths\r\nfunction getPathFromString(value) {\r\n    // Grab the electron process, not the renderer process\r\n    const process = window.require(\"process\");\r\n    // Split the path into directory sections\r\n    const pathSplit = value.split(\"/\");\r\n\r\n    // Get the root of the path based on some variables\r\n    // This might be the most incomprehensible line I've written in a while\r\n    const root = {\r\n        appdata: process.env.APPDATA,\r\n        local: process.env.LOCALAPPDATA,\r\n        localappdata: process.env.LOCALAPPDATA,\r\n        home: process.env.HOMEPATH,\r\n        public: process.env.PUBLIC,\r\n        user: process.env.USERPROFILE,\r\n        programfiles86: process.env.ProgramFiles,\r\n        programfiles: process.env.ProgramW6432\r\n    }[pathSplit[0].toLowerCase().replaceAll(\"%\", \"\")] ?? pathSplit[0];\r\n\r\n    // Return the path based on the root directory and the rest of the split path\r\n    return path.join(root, pathSplit.slice(1).join(\"/\")).replaceAll(\"\\\\\", \"/\");\r\n}\r\n\r\nexport default function LauncherModal() {\r\n    // Create the field ref\r\n    const fieldRef = React.useRef();\r\n    // Create our auto complete state\r\n    const [autoCompleteEntries, setAutoCompleteEntries] = React.useState([]);\r\n    \r\n    // Handle the send event\r\n    function handleSend(args) {\r\n        const _arguments = args.match(/[^\\s\"']+|\"([^\"]*)\"|'([^']*)'/gm);\r\n        \r\n        // Sent arguments was of type command, execute command if valid\r\n        if (args.startsWith(\"!\")) {\r\n            // Get the command object based on the first argument, lowercase, without the !\r\n            const command = commands[args.split(\" \")[0].slice(1).toLowerCase()];\r\n            \r\n            // Command exists, execute it\r\n            if (command) {\r\n                // Call the command and get its return value\r\n                const response = command.handle(..._arguments.slice(1));\r\n                \r\n                // Display our data to the user\r\n                response && Toasts.showToast(response.toString());\r\n                console.log(response);\r\n            }\r\n            // Command does not exist, throw an error\r\n            else {\r\n                Toasts.showToast(<span>{arguments[0].slice(1)} is not a valid command</span>, \"Failure\");\r\n            }\r\n        }\r\n        // TODO check for indexed files\r\n        // If no commands or indexed files were found, try to launch manually\r\n        else {\r\n            // Try catch, in case of errors\r\n            try {\r\n                // Open the file, directory, or URL\r\n                childProcess.exec(`start \"\" \"${getPathFromString(args)}\"`);\r\n\r\n                // Close the modal\r\n                window.close();\r\n            }\r\n            // An error was caught, throw it to the console and warn the user\r\n            catch (e) {\r\n                console.error(e);\r\n                Toasts.showToast(\"Error opening file, check console for details\", \"Failure\");\r\n            }\r\n        }\r\n        \r\n        // Clear the field\r\n        fieldRef.current.value = \"\";\r\n    }\r\n    \r\n    // Handle rendering of auto-complete\r\n    function handleAutoComplete({ currentTarget: { value } }) {\r\n        // If we're typing a command, handle that and return\r\n        if (value.startsWith(\"!\")) {\r\n            // Get the value after the !, in lowercase\r\n            const search = value.slice(1).toLowerCase();\r\n            // Filter all of our commands by search\r\n            const results = Object.keys(commands).filter(cmd => ~cmd.indexOf(search));\r\n            // Create an empty components array\r\n            const components = [];\r\n            \r\n            // Iterate our results and push them to the components array\r\n            for (const result of results) {\r\n                const command = commands[result];\r\n                \r\n                components.push(\r\n                    <div className=\"Item\" key={result} onClick={() => fieldRef.current.value = \"!\" + result}>\r\n                        <FontAwesomeIcon icon={faTerminal}/>\r\n                        \r\n                        <span><b>!{result}</b><span style={{ opacity: 0.5 }}> - {command.description}</span></span>\r\n                    </div>\r\n                );\r\n                \r\n                setAutoCompleteEntries(components);\r\n            }\r\n            \r\n            return;\r\n        }\r\n        \r\n        // Put our raw path through the variable checks\r\n        const fpRaw = getPathFromString(value);\r\n        // Get the second to last path entry, to exclude what we're searching\r\n        const fpDir = fpRaw.split(\"/\").slice(0, -1).join(\"/\");\r\n        // If the fp doesn't exist, but the dir does, set fp to dir\r\n        const fp = !fs.existsSync(fpRaw) && fs.existsSync(fpDir) ? fpDir : fpRaw;\r\n        \r\n        // dir exists, get its files\r\n        if (value && fs.existsSync(fp)) {\r\n            // Read all files in the directory, filtered by searching the final path entry\r\n            const files = fs.readdirSync(fp).filter(p =>\r\n                ~path.join(fp, p).toLowerCase().indexOf(fpRaw.split(\"/\").slice(-1)[0].toLowerCase()));\r\n            // Map the first 10 files into auto complete entry components\r\n            const components = files.slice(0, 10).map(fn => (\r\n                <div className=\"Item\" key={fn} onClick={() => fieldRef.current.value = path.join(fp, fn)}>\r\n                    <FontAwesomeIcon icon={fs.lstatSync(path.join(fp, fn)).isDirectory()\r\n                        ? faFolder : faFile}/>\r\n                    \r\n                    <span>{fn}</span>\r\n                </div>\r\n            ));\r\n            \r\n            // Set our entries to the components list\r\n            setAutoCompleteEntries(components);\r\n        }\r\n        // If the directory doesn't exist, clear our entries\r\n        else setAutoCompleteEntries([]);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"LauncherModal\">\r\n            <div className=\"Title\">\r\n                <img alt=\"Icon\" src={IconFlat} height={20}/>\r\n                \r\n                Ignis Launcher\r\n            </div>\r\n\r\n            <div className=\"Flex\">\r\n                <input className=\"LauncherModalField\" ref={fieldRef}\r\n                       onKeyDown={e => e.key === \"Enter\" && handleSend(e.currentTarget.value)}\r\n                       onChange={handleAutoComplete}\r\n                       placeholder=\"Example - !help\"/>\r\n\r\n                <div className=\"Button\" onClick={() => handleSend(fieldRef.current.value)}>\r\n                    <FontAwesomeIcon icon={faFire}/>\r\n                    \r\n                    <Tooltip>\r\n                        Run Command\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"AutoComplete\">\r\n                {autoCompleteEntries}\r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}