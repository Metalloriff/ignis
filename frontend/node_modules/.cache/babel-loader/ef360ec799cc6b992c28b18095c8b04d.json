{"ast":null,"code":"var _jsxFileName = \"D:\\\\MEGA\\\\Shared\\\\React\\\\ignis\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./App.scss\";\nimport LauncherModal from \"./Components/LauncherModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Create a ref\n  const ref = React.useRef();\n  const [opacity, setOpacity] = React.useState(0); // Create some events\n\n  const events = {\n    onMouseUp: e => {\n      // Ensure we're clicking the backdrop\n      if (e.target !== e.currentTarget) return; // Transition out\n\n      setOpacity(0); // Close the window after the transition ends\n\n      setTimeout(window.close.bind(window), 250);\n    }\n  }; // On component mount\n\n  React.useEffect(() => {\n    // Create a focus listener callback to set the opacity to 1\n    const focusListener = () => setOpacity(1); // Add the event listener on mount, remove on unmount\n\n\n    window.addEventListener(\"focus\", focusListener);\n    return () => window.removeEventListener(\"focus\", focusListener);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ...events,\n    ref: ref,\n    style: {\n      opacity\n    },\n    children: /*#__PURE__*/_jsxDEV(LauncherModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"hP4tfgG9aiRylDpy5NYa7jX2ymo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/MEGA/Shared/React/ignis/frontend/src/App.js"],"names":["React","LauncherModal","App","ref","useRef","opacity","setOpacity","useState","events","onMouseUp","e","target","currentTarget","setTimeout","window","close","bind","useEffect","focusListener","addEventListener","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC7B;AACA,QAAMC,GAAG,GAAGH,KAAK,CAACI,MAAN,EAAZ;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,KAAK,CAACO,QAAN,CAAe,CAAf,CAA9B,CAH6B,CAK7B;;AACA,QAAMC,MAAM,GAAG;AACdC,IAAAA,SAAS,EAAEC,CAAC,IAAI;AACf;AACA,UAAIA,CAAC,CAACC,MAAF,KAAaD,CAAC,CAACE,aAAnB,EAAkC,OAFnB,CAIf;;AACAN,MAAAA,UAAU,CAAC,CAAD,CAAV,CALe,CAMf;;AACAO,MAAAA,UAAU,CAACC,MAAM,CAACC,KAAP,CAAaC,IAAb,CAAkBF,MAAlB,CAAD,EAA4B,GAA5B,CAAV;AACA;AATa,GAAf,CAN6B,CAkB7B;;AACAd,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACrB;AACA,UAAMC,aAAa,GAAG,MAAMZ,UAAU,CAAC,CAAD,CAAtC,CAFqB,CAIrB;;;AACAQ,IAAAA,MAAM,CAACK,gBAAP,CAAwB,OAAxB,EAAiCD,aAAjC;AACA,WAAO,MAAMJ,MAAM,CAACM,mBAAP,CAA2B,OAA3B,EAAoCF,aAApC,CAAb;AACA,GAPD,EAOG,EAPH;AASA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,OAAyBV,MAAzB;AAAiC,IAAA,GAAG,EAAEL,GAAtC;AAA2C,IAAA,KAAK,EAAE;AAAEE,MAAAA;AAAF,KAAlD;AAAA,2BACC,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAKA;;GAjCuBH,G;;KAAAA,G","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport LauncherModal from \"./Components/LauncherModal\";\n\nexport default function App() {\n\t// Create a ref\n\tconst ref = React.useRef();\n\tconst [opacity, setOpacity] = React.useState(0);\n\t\n\t// Create some events\n\tconst events = {\n\t\tonMouseUp: e => {\n\t\t\t// Ensure we're clicking the backdrop\n\t\t\tif (e.target !== e.currentTarget) return;\n\t\t\t\n\t\t\t// Transition out\n\t\t\tsetOpacity(0);\n\t\t\t// Close the window after the transition ends\n\t\t\tsetTimeout(window.close.bind(window), 250);\n\t\t}\n\t};\n\t\n\t// On component mount\n\tReact.useEffect(() => {\n\t\t// Create a focus listener callback to set the opacity to 1\n\t\tconst focusListener = () => setOpacity(1);\n\t\t\n\t\t// Add the event listener on mount, remove on unmount\n\t\twindow.addEventListener(\"focus\", focusListener);\n\t\treturn () => window.removeEventListener(\"focus\", focusListener);\n\t}, []);\n\t\n\treturn (\n\t\t<div className=\"App\" {...events} ref={ref} style={{ opacity }}>\n\t\t\t<LauncherModal/>\n\t\t</div>\n\t);\n}"]},"metadata":{},"sourceType":"module"}