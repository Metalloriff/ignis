{"ast":null,"code":"var _jsxFileName = \"D:\\\\MEGA\\\\Shared\\\\React\\\\ignis\\\\frontend\\\\src\\\\Components\\\\LauncherModal.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFire, faFolder, faImage } from \"@fortawesome/free-solid-svg-icons\";\nimport Tooltip from \"./Tooltip\";\nimport Toasts, { Toast } from \"./Toasts\";\nimport IconFlat from \"../Icons/LogoFlat.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst commands = {\n  help: {\n    description: \"Lists all of the available commands.\"\n  },\n  js: {\n    description: \"Executes the specified arguments as JavaScript.\",\n    arguments: \"<code>\",\n    handle: (...args) => eval(args.join(\" \"))\n  }\n}; // Import the file system module\n\nconst fs = window.require(\"fs\"); // Import the path module\n\n\nconst path = window.require(\"path\"); // Get the child process module\n\n\nconst childProcess = window.require(\"child_process\"); // This is responsible for formatting paths to variable paths\n\n\nfunction getPathFromString(value) {\n  var _appdata$local$locala;\n\n  // Split the path into directory sections\n  const pathSplit = value.split(\"/\"); // Get the root of the path based on some variables\n  // This might be the most incomprehensible line I've written in a while\n\n  console.log(pathSplit[0].toLowerCase().replaceAll(\"%\", \"\"));\n  const root = (_appdata$local$locala = {\n    appdata: process.env.APPDATA,\n    local: process.env.LOCALAPPDATA,\n    localappdata: process.env.LOCALAPPDATA,\n    home: process.env.HOMEPATH,\n    public: process.env.PUBLIC,\n    user: process.env.USERPROFILE,\n    programfiles86: process.env.ProgramFiles,\n    programfiles: process.env.ProgramW6432\n  }[pathSplit[0].toLowerCase().replaceAll(\"%\", \"\")]) !== null && _appdata$local$locala !== void 0 ? _appdata$local$locala : pathSplit[0]; // Return the path based on the root directory and the rest of the split path\n\n  return path.join(root, pathSplit.slice(1).join(\"/\"));\n}\n\nexport default function LauncherModal() {\n  _s();\n\n  // Create the field ref\n  const fieldRef = React.useRef(); // Create our auto complete state\n\n  const [autoCompleteEntries, setAutoCompleteEntries] = React.useState([/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Item\",\n    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"/somefolder/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Item\",\n    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faFolder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"/somefolder/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Item\",\n    children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"/somefile.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this)]); // Handle the send event\n\n  function handleSend(args) {\n    const _arguments = args.match(/[^\\s\"']+|\"([^\"]*)\"|'([^']*)'/gm); // Sent arguments was of type command, execute command if valid\n\n\n    if (args.startsWith(\"!\")) {\n      // Get the command object based on the first argument, lowercase, without the !\n      const command = commands[args.split(\" \")[0].slice(1).toLowerCase()]; // Command exists, execute it\n\n      if (command) {\n        // Call the command and get its return value\n        const response = command.handle(..._arguments.slice(1)); // Display our data to the user\n\n        response && Toasts.showToast(response.toString());\n        console.log(response);\n      } // Command does not exist, throw an error\n      else {\n        Toasts.showToast( /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [arguments[0].slice(1), \" is not a valid command\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 34\n        }, this), \"Failure\");\n      }\n    } // TODO check for indexed files\n    // If no commands or indexed files were found, try to launch manually\n    else {\n      // Try catch, in case of errors\n      try {\n        // Open the file, directory, or URL\n        childProcess.exec(`start \"\" \"${getPathFromString(args)}\"`); // Close the modal\n\n        window.close();\n      } catch (e) {\n        Toasts.showToast(\"Error opening file, check console for details\", \"Failure\");\n      }\n    } // Clear the field\n\n\n    fieldRef.current.value = \"\";\n  } // Handle rendering of auto-complete\n\n\n  function handleAutoComplete({\n    currentTarget: {\n      value\n    }\n  }) {\n    // TODO handle command auto complete\n    if (value.startsWith(\"!\")) {\n      return;\n    }\n\n    const path = getPathFromString(value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"LauncherModal\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Title\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Icon\",\n        src: IconFlat,\n        height: 20\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), \"Ignis Launcher\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"LauncherModalField\",\n        ref: fieldRef,\n        onKeyDown: e => e.key === \"Enter\" && handleSend(e.currentTarget.value),\n        placeholder: \"Example - !help\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Button\",\n        onClick: () => handleSend(fieldRef.current.value),\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faFire\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          children: \"Run Command\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AutoComplete\",\n      children: autoCompleteEntries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LauncherModal, \"Wigv8U+gUqQ+3QPPTSGJgfMY+IU=\");\n\n_c = LauncherModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"LauncherModal\");","map":{"version":3,"sources":["D:/MEGA/Shared/React/ignis/frontend/src/Components/LauncherModal.js"],"names":["React","FontAwesomeIcon","faFire","faFolder","faImage","Tooltip","Toasts","Toast","IconFlat","commands","help","description","js","arguments","handle","args","eval","join","fs","window","require","path","childProcess","getPathFromString","value","pathSplit","split","console","log","toLowerCase","replaceAll","root","appdata","process","env","APPDATA","local","LOCALAPPDATA","localappdata","home","HOMEPATH","public","PUBLIC","user","USERPROFILE","programfiles86","ProgramFiles","programfiles","ProgramW6432","slice","LauncherModal","fieldRef","useRef","autoCompleteEntries","setAutoCompleteEntries","useState","handleSend","_arguments","match","startsWith","command","response","showToast","toString","exec","close","e","current","handleAutoComplete","currentTarget","key"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFire, faFolder, faImage } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Tooltip from \"./Tooltip\";\r\nimport Toasts, { Toast } from \"./Toasts\";\r\nimport IconFlat from \"../Icons/LogoFlat.png\";\r\n\r\nconst commands = {\r\n    help: {\r\n        description: \"Lists all of the available commands.\"\r\n    },\r\n    js: {\r\n        description: \"Executes the specified arguments as JavaScript.\",\r\n        arguments: \"<code>\",\r\n        handle: (...args) => eval(args.join(\" \"))\r\n    }\r\n};\r\n\r\n// Import the file system module\r\nconst fs = window.require(\"fs\");\r\n// Import the path module\r\nconst path = window.require(\"path\");\r\n// Get the child process module\r\nconst childProcess = window.require(\"child_process\");\r\n\r\n// This is responsible for formatting paths to variable paths\r\nfunction getPathFromString(value) {\r\n    // Split the path into directory sections\r\n    const pathSplit = value.split(\"/\");\r\n\r\n    // Get the root of the path based on some variables\r\n    // This might be the most incomprehensible line I've written in a while\r\n    console.log(pathSplit[0].toLowerCase().replaceAll(\"%\", \"\"));\r\n    const root = {\r\n        appdata: process.env.APPDATA,\r\n        local: process.env.LOCALAPPDATA,\r\n        localappdata: process.env.LOCALAPPDATA,\r\n        home: process.env.HOMEPATH,\r\n        public: process.env.PUBLIC,\r\n        user: process.env.USERPROFILE,\r\n        programfiles86: process.env.ProgramFiles,\r\n        programfiles: process.env.ProgramW6432\r\n    }[pathSplit[0].toLowerCase().replaceAll(\"%\", \"\")] ?? pathSplit[0];\r\n\r\n    // Return the path based on the root directory and the rest of the split path\r\n    return path.join(root, pathSplit.slice(1).join(\"/\"));\r\n}\r\n\r\nexport default function LauncherModal() {\r\n    // Create the field ref\r\n    const fieldRef = React.useRef();\r\n    // Create our auto complete state\r\n    const [autoCompleteEntries, setAutoCompleteEntries] = React.useState([\r\n        <div className=\"Item\">\r\n            <FontAwesomeIcon icon={faFolder}/>\r\n            <span>/somefolder/</span>\r\n        </div>,\r\n        <div className=\"Item\">\r\n            <FontAwesomeIcon icon={faFolder}/>\r\n            <span>/somefolder/</span>\r\n        </div>,\r\n        <div className=\"Item\">\r\n            <FontAwesomeIcon icon={faImage}/>\r\n            <span>/somefile.png</span>\r\n        </div>\r\n    ]);\r\n    \r\n    // Handle the send event\r\n    function handleSend(args) {\r\n        const _arguments = args.match(/[^\\s\"']+|\"([^\"]*)\"|'([^']*)'/gm);\r\n        \r\n        // Sent arguments was of type command, execute command if valid\r\n        if (args.startsWith(\"!\")) {\r\n            // Get the command object based on the first argument, lowercase, without the !\r\n            const command = commands[args.split(\" \")[0].slice(1).toLowerCase()];\r\n            \r\n            // Command exists, execute it\r\n            if (command) {\r\n                // Call the command and get its return value\r\n                const response = command.handle(..._arguments.slice(1));\r\n                \r\n                // Display our data to the user\r\n                response && Toasts.showToast(response.toString());\r\n                console.log(response);\r\n            }\r\n            // Command does not exist, throw an error\r\n            else {\r\n                Toasts.showToast(<span>{arguments[0].slice(1)} is not a valid command</span>, \"Failure\");\r\n            }\r\n        }\r\n        // TODO check for indexed files\r\n        // If no commands or indexed files were found, try to launch manually\r\n        else {\r\n            // Try catch, in case of errors\r\n            try {\r\n                // Open the file, directory, or URL\r\n                childProcess.exec(`start \"\" \"${getPathFromString(args)}\"`);\r\n\r\n                // Close the modal\r\n                window.close();\r\n            }\r\n            catch (e) {\r\n                Toasts.showToast(\"Error opening file, check console for details\", \"Failure\");\r\n            }\r\n        }\r\n        \r\n        // Clear the field\r\n        fieldRef.current.value = \"\";\r\n    }\r\n    \r\n    // Handle rendering of auto-complete\r\n    function handleAutoComplete({ currentTarget: { value } }) {\r\n        // TODO handle command auto complete\r\n        if (value.startsWith(\"!\")) {\r\n            return;\r\n        }\r\n        \r\n        const path = getPathFromString(value);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"LauncherModal\">\r\n            <div className=\"Title\">\r\n                <img alt=\"Icon\" src={IconFlat} height={20}/>\r\n                \r\n                Ignis Launcher\r\n            </div>\r\n\r\n            <div className=\"Flex\">\r\n                <input className=\"LauncherModalField\" ref={fieldRef}\r\n                       onKeyDown={e => e.key === \"Enter\" && handleSend(e.currentTarget.value)}\r\n                       placeholder=\"Example - !help\"/>\r\n\r\n                <div className=\"Button\" onClick={() => handleSend(fieldRef.current.value)}>\r\n                    <FontAwesomeIcon icon={faFire}/>\r\n                    \r\n                    <Tooltip>\r\n                        Run Command\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"AutoComplete\">\r\n                {autoCompleteEntries}\r\n            </div>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}